import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class CourseRegistrationSystem {

    // Class to represent a Course
    static class Course {
        String code;
        String title;
        String description;
        int capacity;
        String schedule;
        ArrayList<String> registeredStudents = new ArrayList<>();

        public Course(String code, String title, String description, int capacity, String schedule) {
            this.code = code;
            this.title = title;
            this.description = description;
            this.capacity = capacity;
            this.schedule = schedule;
        }

        // Check if slots are available
        public boolean hasAvailableSlots() {
            return registeredStudents.size() < capacity;
        }

        // Register a student
        public boolean registerStudent(String studentId) {
            if (hasAvailableSlots()) {
                registeredStudents.add(studentId);
                return true;
            } else {
                return false;
            }
        }

        // Remove a student
        public boolean removeStudent(String studentId) {
            return registeredStudents.remove(studentId);
        }

        // Display course details
        public void displayCourseDetails() {
            System.out.println("Course Code: " + code);
            System.out.println("Title: " + title);
            System.out.println("Description: " + description);
            System.out.println("Schedule: " + schedule);
            System.out.println("Capacity: " + capacity);
            System.out.println("Available Slots: " + (capacity - registeredStudents.size()));
        }
    }

    // Class to represent a Student
    static class Student {
        String studentId;
        String name;
        ArrayList<Course> registeredCourses = new ArrayList<>();

        public Student(String studentId, String name) {
            this.studentId = studentId;
            this.name = name;
        }

        // Register for a course
        public boolean registerForCourse(Course course) {
            if (course.registerStudent(this.studentId)) {
                registeredCourses.add(course);
                System.out.println("Successfully registered for course: " + course.title);
                return true;
            } else {
                System.out.println("Registration failed. No available slots for " + course.title);
                return false;
            }
        }

        // Drop a course
        public boolean dropCourse(Course course) {
            if (registeredCourses.remove(course)) {
                course.removeStudent(this.studentId);
                System.out.println("Successfully dropped course: " + course.title);
                return true;
            } else {
                System.out.println("You are not registered for this course.");
                return false;
            }
        }

        // Display registered courses
        public void displayRegisteredCourses() {
            if (registeredCourses.isEmpty()) {
                System.out.println("No courses registered.");
            } else {
                System.out.println("Registered Courses:");
                for (Course course : registeredCourses) {
                    System.out.println("- " + course.title);
                }
            }
        }
    }

    // HashMaps to store courses and students
    static HashMap<String, Course> courses = new HashMap<>();
    static HashMap<String, Student> students = new HashMap<>();
    static int studentCount = 1;  // For generating unique student IDs

    // Method to generate a unique student ID
    public static String generateStudentId() {
        return "S" + String.format("%03d", studentCount++);
    }

    // Main function
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Sample Courses
        courses.put("CS101", new Course("CS101", "Introduction to Computer Science", "Basics of computer science", 3, "Mon/Wed 10am-12pm"));
        courses.put("CS102", new Course("CS102", "Data Structures", "Introduction to data structures", 2, "Tue/Thu 2pm-4pm"));

        while (true) {
            System.out.println("\n--- Course Registration System ---");
            System.out.println("1. List Available Courses");
            System.out.println("2. Register for a Course");
            System.out.println("3. Drop a Course");
            System.out.println("4. Display Registered Courses");
            System.out.println("5. Create New Student");
            System.out.println("6. Display All Students");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    // Display available courses
                    System.out.println("\nAvailable Courses:");
                    for (Course course : courses.values()) {
                        course.displayCourseDetails();
                        System.out.println("------------------");
                    }
                    break;

                case 2:
                    // Register for a course
                    System.out.print("Enter your Student ID: ");
                    String studentId = scanner.nextLine();
                    Student student = students.get(studentId);
                    if (student == null) {
                        System.out.println("Student not found.");
                        break;
                    }

                    System.out.print("Enter Course Code to register: ");
                    String courseCode = scanner.nextLine();
                    Course course = courses.get(courseCode);
                    if (course == null) {
                        System.out.println("Course not found.");
                        break;
                    }

                    student.registerForCourse(course);
                    break;

                case 3:
                    // Drop a course
                    System.out.print("Enter your Student ID: ");
                    studentId = scanner.nextLine();
                    student = students.get(studentId);
                    if (student == null) {
                        System.out.println("Student not found.");
                        break;
                    }

                    System.out.print("Enter Course Code to drop: ");
                    courseCode = scanner.nextLine();
                    course = courses.get(courseCode);
                    if (course == null) {
                        System.out.println("Course not found.");
                        break;
                    }

                    student.dropCourse(course);
                    break;

                case 4:
                    // Display registered courses for a student
                    System.out.print("Enter your Student ID: ");
                    studentId = scanner.nextLine();
                    student = students.get(studentId);
                    if (student == null) {
                        System.out.println("Student not found.");
                        break;
                    }

                    student.displayRegisteredCourses();
                    break;

                case 5:
                    // Create new student
                    System.out.print("Enter student name: ");
                    String name = scanner.nextLine();
                    studentId = generateStudentId();
                    Student newStudent = new Student(studentId, name);
                    students.put(studentId, newStudent);
                    System.out.println("New student created. Student ID: " + studentId);
                    break;

                case 6:
                    // Display all students
                    System.out.println("\nList of Students:");
                    for (Student s : students.values()) {
                        System.out.println("Student ID: " + s.studentId + " | Name: " + s.name);
                    }
                    break;

                case 7:
                    // Exit
                    System.out.println("Exiting...");
                    return;

                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }
}
